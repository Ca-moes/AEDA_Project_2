Info do pdf:
A delega√ß√£o quer agora manter um registo de todos os seus funcion√°rios (atuais ou antigos) numa tabela de dispers√£o. 
A manuten√ß√£o do registo de funcion√°rios antigos da empresa justifica-se porque, no caso de necessidade de contrata√ß√£o de novos funcion√°rios, a delega√ß√£o tem como pol√≠tica interna a contrata√ß√£o de funcion√°rios j√° conhecidos. 
Devem ser permitidas listagens ou pesquisas de funcion√°rios, dos diversos tipos, atuais e antigos, a especificar .
____________________________________________________________________________________________
HashTable com funcion√°rios (atuais e antigos)

A implementar:
	- Possibilitar listagens
		- mostrar todos os funcion√°rios
		-    ''   funcionarios antigos
		-    ''   funcionario atuais
	- Possibilitar pesquisas
		- funcion√°rios atuais
		- funcion√°rios antigos
		- por nome


A fazer:
	- people.txt
		-X nova linha para atual/antigo em cada funcinario
		-X adicionar mais funcion√°rios
	- Person.h
		-X private: adicinar bool employed	
		-X mudar parametro em constructor
		-x criar set e get de employement
	- Person.cpp
		-x Mudar constructores (com parametros e de c√≥pia) para adicionar novo bool
		-x Implementar Get e Set de employment
		-x modificar info()		[Ver se fica bem]Done
		-x modificar showInfoPerson()	[Ver se fica bem]Done
	- auxiliar.h
		-x adicionar fun√ß√£o to_bool()
	- auxiliar.cpp
		-x declarar nova fun√ß√£o
	- Delegation.h
		-x nas linhas anteriores √° declara√ß√£o da classe Delegation - criar struct hashFunc com operator() [comparar pointers]
		-x private - adicionar unordered_set<Staff*, hashFunc, hashFunc> staff
	- Delegation.cpp
		- alterar readPeopleFile 
			-x adicionar um caso no switch de l.316 para ler employment
			-x passar linha 360 (people.push_back(new Staff(*s));) para case 7: e para al√©m de adicionar a vector<Person*> people, adiconar tamb√©m a unordered_set staff
			-x mudar linha 230 de (readFunc = lines[i + 6].empty();) para [readFunc = lines[i + 7].empty();]
		- alterar writePeopleFile
			-x linha 387 - a seguir adicionar employment
			-|| Possivel mudan√ßa, adicionar staff a partir de HashTable e Atletas a partir de people

‚Üë Mudan√ßas a ficheiro people.txt leitura e escrita no ficheiro, leitura de dados para mem√≥ria ‚Üë
‚Üì Implementa√ß√µes com a HashTable ‚Üì
 (Main Menu -> 1-Members -> 3-Staff)
Op√ß√µes:	1 Add
	2 Remove
	3 Change
	4 Show 1
	5 Show All

	Para 1 Add:
	- Delegation.cpp
		addStaffMember()
		-x l.1305 adicionar peda√ßo para adiconar employment
		-x l.1306 para al√©m de adiconar a people, adicionar √° hashtable  
		[Possivel altera√ß√£o na linha 1245 para FindPerson - procurar na hashtable em vez de vetor ¬Ø\_(„ÉÑ)_/¬Ø ]
		-x Criar FindPersonHash (tamb√©m est√° em Delegation.h)
	Para 2 Remove:
	- Delegation.cpp
		-x removeStaffMember()
		-x l.1345 adiconar tambem remover da hashtable
	Para 3 Change:
	- Delegation.cpp
		changeStaffMember() - Agora a mudar a partir da hashtable üëç
		-x adicionar no menu "7 - Employment"
		-x mudar checkinputchoice upperlimir = 7
		-x Adicionar case 7: ao switch (ir peda√ßo de c√≥digo √° fun√ß√£o de Add)
		-x em cada caso em vez de [people.at(index)->setName(tmp);] no final do case, ter uma mudan√ßa feita no pointer de Staff a partir da HashTable
	Para 4 Show 1:
	- Delegation.cpp
		x showStaffMember() [mais trabalhosa]
		Por enquanto est√° s√≥ pesquisa por nome, se der vontade faz-se como em baixo ¬Ø\_(„ÉÑ)_/¬Ø
		(Criar SubMenu para pesquisar por nome, employed ou n√£o employed)
		(se escolher employed ou n√£o employed, vista de s√≥ nomes com numeros √° esquerda para escolher um n√∫mero e ver detalhes)
	Para 5 Show All:
	- Delegation.cpp
		x showStaffMembers()
	(Mudar para mostrar employed primeiro _____________ not employed depois) <- N√£o foi feito isto, inv√©s -> op√ß√£o para ver qual quer mostrar
		


Mudan√ßas Extra: Not Implemented
Identificar pessoas pelo passaporte e n√£o nome
	-x Hash Table guiada pelo passport
	- adiconar pessoa - 1¬∫ pedido √© passport
	- eliminar pessoa - o pedido √© passport
	- change pessoa - o pedido √© passport
		
		